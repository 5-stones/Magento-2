<?php
/**
 * Override Magento Customer login form block.
 * This override is defined in  GigyaM2\view\frontend\layout\customer_account_login.xml
 * The html template generated by this block is: GigyaM2\view\frontend\templates\gigya_login.phtml
 * (essentialy it's a duplicate of the original class at - Customer\Block\Form\Login.php
 */

// Replace namespace Magento\Customer\Controller\Account;
namespace Gigya\GigyaM2\Controller\Raas;

use Magento\Customer\Model\Account\Redirect as AccountRedirect;
use Magento\Framework\App\Action\Context;
use Magento\Customer\Model\Session;
use Magento\Customer\Api\AccountManagementInterface;
use Magento\Customer\Model\Url as CustomerUrl;
use Magento\Framework\Exception\EmailNotConfirmedException;
use Magento\Framework\Exception\AuthenticationException;
use Magento\Framework\Data\Form\FormKey\Validator;


/**
 * @SuppressWarnings(PHPMD.CouplingBetweenObjects)
 */
class LoginPost extends \Magento\Customer\Controller\AbstractAccount
{
    /** @var AccountManagementInterface */
    protected $customerAccountManagement;

    /** @var Validator */
    protected $formKeyValidator;

    /**
     * @var AccountRedirect
     */
    protected $accountRedirect;

    /**
     * @var Session
     */
    protected $session;

    /**
     * @param Context $context
     * @param Session $customerSession
     * @param AccountManagementInterface $customerAccountManagement
     * @param CustomerUrl $customerHelperData
     * @param Validator $formKeyValidator
     * @param AccountRedirect $accountRedirect
     */
    public function __construct(
        Context $context,
        Session $customerSession,
        AccountManagementInterface $customerAccountManagement,
        CustomerUrl $customerHelperData,
        Validator $formKeyValidator,
        AccountRedirect $accountRedirect
    ) {
        $this->session = $customerSession;
        $this->customerAccountManagement = $customerAccountManagement;
        $this->customerUrl = $customerHelperData;
        $this->formKeyValidator = $formKeyValidator;
        $this->accountRedirect = $accountRedirect;
        parent::__construct($context);
    }

    /**
     * Login post action
     *
     * @return \Magento\Framework\Controller\Result\Redirect
     * @SuppressWarnings(PHPMD.CyclomaticComplexity)
     */
    public function execute()
    {
        if ($this->session->isLoggedIn() || !$this->formKeyValidator->validate($this->getRequest())) {
            /** @var \Magento\Framework\Controller\Result\Redirect $resultRedirect */
            $resultRedirect = $this->resultRedirectFactory->create();
            $resultRedirect->setPath('*/*/');
            return $resultRedirect;
        }

        if ($this->getRequest()->isPost()) {
            // Magento code - creates login array from posted user data.
        //    $login = $this->getRequest()->getPost('login'); // replaced by Gigya validation and user info -
            // Gigya Validation:
            $gigya_validation_post = $this->getRequest()->getPost('login_data');
            $gigya_validation_object = json_decode($gigya_validation_post);
            $gigya_user_validated = $this->gigyaValidateUser($gigya_validation_object);
            if (!$gigya_user_validated) {
                $this->messageManager->addError(__('The user is not validated. Please try again or contact your accounts manager provider.')); // add this message to documentation
                $login = []; // so magento will know there is no user
            } else {
                $login = $this->gigyaLoginDetails($gigya_validation_object->UID); // only user identifier email
                // Gigya user is validated. this means this is an authenticated user that exists for the site.
                //TODO: now check if user exists in magento DB.

                    // if it exists, then  log it in.
                    // if not, create and log in

            }

            // continue with Magento flow to log in
            if (!empty($login['username']) && !empty($login['password'])) {
                try {
                    $customer = $this->customerAccountManagement->authenticate($login['username'], $login['password']);
                    $this->session->setCustomerDataAsLoggedIn($customer);
                    $this->session->regenerateId();
                } catch (EmailNotConfirmedException $e) {
                    $value = $this->customerUrl->getEmailConfirmationUrl($login['username']);
                    $message = __(
                        'This account is not confirmed. <a href="%1">Click here</a> to resend confirmation email.',
                        $value
                    );
                    $this->messageManager->addError($message);
                    $this->session->setUsername($login['username']);
                } catch (AuthenticationException $e) {
                    $message = __('Invalid login or password.');
                    $this->messageManager->addError($message);
                    $this->session->setUsername($login['username']);
                } catch (\Exception $e) {
                    // PA DSS violation: throwing or logging an exception here can disclose customer password
                    $this->messageManager->addError(
                        __('An unspecified error occurred. Please contact us for assistance.')
                    );
                }
            } else {
                $this->messageManager->addError(__('A login and a password are required.'));
            }
        }

        return $this->accountRedirect->getRedirect();
    }

    /*
     * Use Gigya Data Helper to validate user
     */
    protected function gigyaValidateUser($gigya_validation_object) {
        $b_valid_gigya_user = false;
        $b_valid_gigya_user = $this->_objectManager->create('Gigya\GigyaM2\Helper\Data')->_validateRaasUser($gigya_validation_object); // (adding helper as dependency injection in constructor doesn't work in Controller)
        return $b_valid_gigya_user;
    }

    /*
     * get account info for validated user and create $login array
     */
    protected function gigyaLoginDetails($gigya_uid) {
        $account_info = $this->_objectManager->create('Gigya\GigyaM2\Helper\Data')->_getAccount($gigya_uid);
        $login = array(
            "username" => $account_info['loginIDs']['emails'][0],
    //        "username" => "bombo225@mail.com",
    //        "password" => "12qwaszx!@QWASZX" // dynamic (can I override password completely?)
        );
        return $login;
    }

}
